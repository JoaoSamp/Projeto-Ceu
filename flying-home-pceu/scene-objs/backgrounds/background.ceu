data IBackground with
	var& IImage_Quad iquad;
	var IMoving_Obj imov_obj;
	var Color filter = val Color (255, 255, 255, 255);
end

code/call Create_Background (var& IImage_Quad iquad, var IMoving_Obj imov_obj, var IVector velocity) -> IBackground
do
    imov_obj.ikinematic.velocity    = velocity;
    imov_obj.ikinematic.drag        = 1;
	var IBackground ibg 			= val IBackground(&iquad, imov_obj, _);
	escape ibg;
end

code/await Background_Image ( var& IBackground ibackground ) -> none
do
	par/or do
		var& IVector position = &ibackground.imov_obj.ikinematic.position;
		var& IVector scale = &ibackground.imov_obj.iaabb.scale;
		every FRAMES_REDRAW do
			if call On_Screen (position, call AABB_Get_Size(&ibackground.imov_obj.iaabb) ) then
				break;
			end
		end
		every FRAMES_REDRAW do
    		call Draw_Image( &ibackground.iquad, position.x, position.y, scale.x, scale.y, ibackground.iquad.offset.x, ibackground.iquad.offset.y, ibackground.imov_obj.iaabb.rotate_angle, ibackground.filter );
			if not(call On_Screen (position, call AABB_Get_Size(&ibackground.imov_obj.iaabb) )) then
				break;
			end
		end
	with
        var int dt;
        every dt in FRAMES_UPDATE do
            call Kinematic_Update_Position ( &ibackground.imov_obj.ikinematic, dt );
        end
	end
end

code/await Background_Color ( var& Color color ) -> NEVER
do
	every FRAMES_REDRAW do
		var IVector camera_size = call Camera_Get_Size ();
		var IVector camera_position = call Camera_Get_Position();
		emit GRAPHICS_SET_DRAW_MODE(DRAW_MODE_FILL);
		call Draw_Rectangle( camera_position.x, camera_position.y, (camera_size.x + 2), (camera_size.y + 2), camera_size.x * 0.5, camera_size.y * 0.5, color);
	end
end 