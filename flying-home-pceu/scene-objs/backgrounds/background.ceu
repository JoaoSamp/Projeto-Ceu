data IBackground with
	var& IImage_Quad iquad;
	var IMoving_Obj imov_obj;
	var IVector relative_velocity;
end

code/call Create_Background (var& IImage_Quad iquad, var IMoving_Obj imov_obj, var IVector relative_velocity) -> IBackground
do
	var IBackground ibg = val IBackground(&iquad, imov_obj, relative_velocity);
	escape ibg;
end

code/await Background_Image ( var& IBackground ibackground ) -> none
do
	par/or do
		var& IVector position = &ibackground.imov_obj.ikinematic.position;
		var& IVector scale = &ibackground.imov_obj.iaabb.scale;
		every FRAMES_REDRAW do
			if call On_Screen (position, call AABB_Get_Size(&ibackground.imov_obj.iaabb) ) then
				break;
			end
		end
		every FRAMES_REDRAW do
    		call Draw_Image( &ibackground.iquad, position.x, position.y, scale.x, scale.y, ibackground.iquad.offset.x, ibackground.iquad.offset.y, ibackground.imov_obj.iaabb.rotate_angle );
			if not(call On_Screen (position, call AABB_Get_Size(&ibackground.imov_obj.iaabb) )) then
				break;
			end
		end
	with
        var int dt;
        every dt in FRAMES_UPDATE do
			ibackground.imov_obj.ikinematic.velocity = call VAdd(call Camera_Get_Velocity(), ibackground.relative_velocity);
            call Kinematic_Update_Position ( &ibackground.imov_obj.ikinematic, dt );
        end
	end
end