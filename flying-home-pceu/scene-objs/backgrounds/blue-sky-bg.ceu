code/await Blue_Sky_BG (var& IMap imap) -> NEVER
do
    // Create the background's quad 
    var IVector size            = val IVector (512, 288);
    var IVector offset          = call VMultSca(size, 0.5);
    var IVector scale           = val IVector (0.75, 0.75);
    var IImage_Quad iquad       = call Create_Image_Quad("assets/img/background/sky-bg.bmp", offset, 1);
    
    // Create a background data with quad(image) and speed 
    var IVector velocity            = val IVector (10, 0);
    var IVector position            = call Camera_Get_Position();
    var IMoving_Obj imov_obj        = call Create_Moving_Obj( position, size, EType.Kinematic());

    var IBackground ibg_sky_one     = call Create_Background( &iquad, imov_obj, velocity);

    var IBackground ibg_sky_two                 = ibg_sky_one;
    var IVector true_size                       = call AABB_Get_Size(&ibg_sky_two.imov_obj.iaabb);
    ibg_sky_two.imov_obj.ikinematic.position.x  = position.x + true_size.x - 1;
    ibg_sky_two.imov_obj.iaabb.scale.y          = ibg_sky_two.imov_obj.iaabb.scale.y * -1;

    code/await BG_Color_Transition (var Color color, var int time, var int step) -> none do
        var& Background_Color bg_color = spawn Background_Color(&color);
        every (time)ms do
            color.a = color.a + step;
            if color.a > 255 then
                color.a = 255;
                break;
            end
        end
    end

    var [] Color sky_colors = [];
    var Color blue          = val Color (165, 220, 255, 255);
    var Color soft_blue     = val Color (100, 125, 255, 0);
    var Color yellow        = val Color( 255, 215, 130, 0);
    var Color orange        = val Color( 255, 155, 100, 0);
    var Color nightblue     = val Color( 167, 143, 196, 0);
    sky_colors  = sky_colors..[blue];
    sky_colors  = sky_colors..[soft_blue];
    sky_colors  = sky_colors..[yellow];
    sky_colors  = sky_colors..[orange];
    sky_colors  = sky_colors..[nightblue];

    emit WINDOW_SET_CLEAR_COLOR_NAME( blue );
    par do
        //emit WINDOW_SET_CLEAR_COLOR_NAME(  );
        var int i;
        loop i in [0 -> ($sky_colors as int)[ do
            await BG_Color_Transition(sky_colors[i], 300, 10);
            sky_colors[i].a = 255;
            emit WINDOW_SET_CLEAR_COLOR_NAME( sky_colors[i] );
        end
    with
        loop do
            var&? Background_Image bg = spawn Background_Image (&ibg_sky_one);
            await bg;
            var IVector true_size                       = call AABB_Get_Size(&ibg_sky_one.imov_obj.iaabb);
            ibg_sky_one.imov_obj.ikinematic.position.x  = ibg_sky_one.imov_obj.ikinematic.position.x + (true_size.x * 2);
        end
    with
        loop do
            var&? Background_Image bg   = spawn Background_Image (&ibg_sky_two);
            await bg;
            var IVector true_size                       = call AABB_Get_Size(&ibg_sky_two.imov_obj.iaabb);
            ibg_sky_two.imov_obj.ikinematic.position.x  = ibg_sky_two.imov_obj.ikinematic.position.x + (true_size.x * 2);
        end
    end
end