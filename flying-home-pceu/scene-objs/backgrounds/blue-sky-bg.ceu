code/await Blue_Sky_BG (var& IMap imap) -> NEVER
do
    // Create the background's quad 
    var IVector size            = val IVector (512, 288);
    var IVector offset          = call VMultSca(size, 0.5);
    var IVector scale           = val IVector (0.75, 0.75);
    var IImage_Quad iquad       = call Create_Image_Quad("assets/img/background/sky-bg.bmp", offset, 1);
    
    // Create a background data with quad(image) and speed 
    var IVector velocity            = val IVector (10, 0);
    var IVector position            = call Camera_Get_Position();
    var IMoving_Obj imov_obj        = call Create_Moving_Obj( position, size, EType.Kinematic());

    var IBackground ibg_sky_one     = call Create_Background( &iquad, imov_obj, velocity);

    var IBackground ibg_sky_two                 = ibg_sky_one;
    var IVector true_size                       = call AABB_Get_Size(&ibg_sky_two.imov_obj.iaabb);
    ibg_sky_two.imov_obj.ikinematic.position.x  = position.x + true_size.x - 1;
    ibg_sky_two.imov_obj.iaabb.scale.y          = ibg_sky_two.imov_obj.iaabb.scale.y * -1;

    var Color bs_color      = val Color (165, 220, 255, 255);
    var Color bs2_color     = val Color (100, 125, 255, 255);
    var Color sunset_color  = val Color( 255, 215, 130, 255);
    var Color sunset2_color = val Color( 255, 155, 100, 255);
    var Color night_color   = val Color( 65, 105, 160, 255);
    var Color bg_color      = bs_color;

    emit WINDOW_SET_CLEAR_COLOR_RGB( bs_color.r, bs_color.g, bs_color.b );
    par do
        loop do
            var&? Background_Image bg = spawn Background_Image (&ibg_sky_one);
            await bg;
            var IVector true_size                       = call AABB_Get_Size(&ibg_sky_one.imov_obj.iaabb);
            ibg_sky_one.imov_obj.ikinematic.position.x  = ibg_sky_one.imov_obj.ikinematic.position.x + (true_size.x * 2);
        end
    with
        loop do
            var&? Background_Image bg   = spawn Background_Image (&ibg_sky_two);
            await bg;
            var IVector true_size                       = call AABB_Get_Size(&ibg_sky_two.imov_obj.iaabb);
            ibg_sky_two.imov_obj.ikinematic.position.x  = ibg_sky_two.imov_obj.ikinematic.position.x + (true_size.x * 2);
        end
    with
        await Color_Transition_S( &bg_color, bs2_color, 60);
        await Color_Transition_S( &bg_color, sunset_color, 90);
        await Color_Transition_S( &bg_color, sunset2_color, 60);
        await Color_Transition_S( &bg_color, night_color, 60);
    with
        every FRAMES_REDRAW do
            emit WINDOW_SET_CLEAR_COLOR_RGB(bg_color.r, bg_color.g, bg_color.b);
        end
    end
end