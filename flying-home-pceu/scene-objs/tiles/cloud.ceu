data ITile_Manager.ICloud;

code/call Create_Cloud_Data (var& IMap imap, var int id) -> ITile_Manager.ICloud
do
	var IVector size = val IVector (28, 28);
	var ITile_Manager.ICloud icloud = val ITile_Manager.ICloud (&imap, BType.Nonsolid(), size, id, _, _);
	escape icloud;	
end

code/await Cloud_Destroy (var& IVector map_speed, var IVector start_position ) -> none
do
	var IVector offset 		= val IVector( 16, 16 );
    var IAnimation ianim_destroy  	= val IAnimation( call Create_Image_Quad( "assets/img/tiles/smallCloud-destroy.bmp", offset, 6), 12);

    var IVector position 	= start_position;
    var IVector scale 		= val IVector( 1, 1 );
    var real rotate_angle 	= 0;
	par/or do
		var int dt;
		every dt in FRAMES_UPDATE do
		    var real speed_x = map_speed.x * dt/1000;
		    var real speed_y = map_speed.y * dt/1000;

		    position.x = position.x + speed_x;
		    position.y = position.y + speed_y;
		end
	with
		await Animation (&ianim_destroy, &position, &scale, &rotate_angle );
	end
end

code/await Cloud (var& ITile_Manager.ICloud itile ) -> NEVER
do
	var IVector offset	= val IVector (16, 16);
    var IImage_Quad iquad       = call Create_Image_Quad("assets/img/tiles/smallCloud-idle.bmp", offset, 2);
    spawn Quad_Cycle(&iquad, 2);
    pool[] Cloud_Destroy destroy_pool;

    par do
		every FRAMES_REDRAW do
			call Tiles_Draw (&itile, &iquad);
		end
	with
		var int index;
		every index in itile.collision do
			itile.imap.tile_map[index] = 0;
			var IVector start_position = call Get_Pos_By_Index( &itile.imap, index );
			spawn Cloud_Destroy (&itile.imap.velocity, start_position) in destroy_pool;
		end
	end
end


code/await/dynamic Tile (var&/dynamic ITile_Manager.ICloud itile ) -> NEVER
do
	await Cloud (&itile);
end

code/call/dynamic Tile_Hit (var&/dynamic IActor.IPlayer iactor, var&/dynamic ITile_Manager.ICloud itile, var int index) -> ITile_Collision
do
	var ITile_Collision it_collision = val ITile_Collision( false, 0);
	it_collision.collision = call Tile_Collision_Check(&itile, &iactor.imov_obj, index );
	if it_collision.collision then
		it_collision.collision = true;
	end
	escape it_collision;
end