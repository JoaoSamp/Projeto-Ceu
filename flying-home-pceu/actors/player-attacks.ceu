data IActor.IFire_Ball with
    var& IActor icaster;
end

code/call Create_Magic_fr_ball (var IVector start_pos, var& IActor icaster ) -> IActor.IFire_Ball
do
    var IVector size                = val IVector(6, 6);
    var IMoving_Obj imov_obj        = call Create_Moving_Obj( start_pos, size);
    imov_obj.ikinematic.drag        = 1;
    imov_obj.ikinematic.velocity    = val IVector (200, 0);
    imov_obj.iboundaries        = call Create_Unbound();
    
    var IActor.IFire_Ball ifr_ball = val IActor.IFire_Ball ( imov_obj, _, _, &icaster, filter);
    escape ifr_ball;
end

code/await Fire_Ball (var& IActor.IFire_Ball ifr_ball, pool&[] Actor actors) -> none
do
    var IVector sprite_size      = val IVector(48, 48);
    var IVector sprite_offset    = val IVector(24, 24);
	var& SDL_Open_Image img_fr_ball 		= spawn SDL_Open_Image( &outer.renderer, "assets/img/actors/tinyBall.png");

    var IImage_Quad iq_fr_ball    = val IImage_Quad( &img_fr_ball,     sprite_size, _  );

    var IAnimation ianim_fr_ball      = val IAnimation( iq_fr_ball,       sprite_offset, 1 );

   	par/or do
    	every SDL_DT do    
    		if call Off_Screen(&ifr_ball) then
    			break;
    		end
    	end
    with
    	loop do
    		await Animation (&ianim_fr_ball, &ifr_ball.imov_obj.iaabb.center, &ifr_ball.imov_obj.iaabb.scale, &ifr_ball.imov_obj.iaabb.rotate_angle );
    	end
    with
    	await ifr_ball.hit;
    with
    	await ifr_ball.destroy;
    end
end

code/await/dynamic Actor ( var&/dynamic IActor.IFire_Ball iactor, pool&[] Actor actors) -> none
do
    await Fire_Ball (&iactor, &actors);
end


code/call/dynamic Actor_Hit (var&/dynamic IActor.IFire_Ball ihitman, var&/dynamic IActor.IEnemie.IBrat itarget) -> IActor_Collision
do
	var ICollision coll_hitman         = val ICollision ( _, _, _, _, _ );
	var ICollision coll_target         = val ICollision ( _, _, _, _, _ );
    var IActor_Collision ia_collision  = val IActor_Collision ( coll_hitman, coll_target );
    escape ia_collision;
end

code/await Fire_Ball ( var& IActor icaster, pool&[] Actor actors, var IVector start_pos ) -> none
do
    var IActor.IFire_Ball ifr_ball   = call Create_Magic_fr_ball(start_pos, &icaster );
    var&? Actor fr_ball              = spawn/dynamic Actor(&ifr_ball, &actors) in actors;
    await fr_ball;
end