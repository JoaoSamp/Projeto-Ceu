data IAABBox with
	var IVector center;
	var IVector half_size;
    var IVector scale 		= val IVector(1, 1);
    var real rotate_angle 	= 0;
end

code/call AABB_Get_Half_Size (var& IAABBox iaabb) -> IVector
do
	escape (call VMultVec (iaabb.half_size, call VAbs(iaabb.scale)));
end

code/call AABB_Get_Size (var& IAABBox iaabb) -> IVector
do
	escape ( call VMultSca (call AABB_Get_Half_Size (&iaabb), 2));
end

code/call Overlaps(var& IAABBox a, var& IAABBox b) -> bool
do
	var IVector a_half_size = call AABB_Get_Half_Size(&a);
	var IVector b_half_size = call AABB_Get_Half_Size(&b);
	if ( _abs(a.center.x - b.center.x) > a_half_size.x + b_half_size.x ) then
		escape false;
	end
	if ( _abs(a.center.y - b.center.y) > a_half_size.y + b_half_size.y ) then
		escape false;
	end
	escape true;
end

code/call OverlapsSigned (var& IAABBox a, var& IAABBox b, var& IVector overlap) -> bool
do
	overlap = val IVector(0, 0);
	var IVector a_half_size = call AABB_Get_Half_Size(&a);
	var IVector b_half_size = call AABB_Get_Half_Size(&b);
	if (a_half_size.x == 0) or (a_half_size.y == 0) or (b_half_size.x == 0) or (b_half_size.y == 0) 
		or ( _fabs( a.center.x - b.center.x) > a_half_size.x + b_half_size.x )
		or ( _fabs( a.center.y - b.center.y) > a_half_size.y + b_half_size.y ) then
		escape false;
	end

	overlap = val IVector( call Signed( a.center.x - b.center.x ) * ( (a_half_size.x + b_half_size.x) - _fabs( a.center.x - b.center.x) ),
						   call Signed( a.center.y - b.center.y ) * ( (a_half_size.y + b_half_size.y) - _fabs( a.center.y - b.center.y) ) );
	escape true;
end