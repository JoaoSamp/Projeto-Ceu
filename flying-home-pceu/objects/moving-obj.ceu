data IMoving_Obj with
	var IAABBox iaabb;
	var IKinematic_Component ikinematic;
	var ISteering_Component isteering;

	var BType body_type;
	var IBoundaries iboundaries = val IBoundaries( _, _, _, _);

	var bool pushes_top 	= false;
	var bool pushes_bottom 	= false;
	var bool pushes_right 	= false;
	var bool pushes_left 	= false;

	var bool pushed_top 	= false;
	var bool pushed_bottom 	= false;
	var bool pushed_right 	= false;
	var bool pushed_left 	= false;

	var bool pushes_top_tile 	= false;
	var bool pushes_bottom_tile = false;
	var bool pushes_right_tile 	= false;
	var bool pushes_left_tile 	= false;

	var bool pushed_top_tile 	= false;
	var bool pushed_bottom_tile = false;
	var bool pushed_right_tile 	= false;
	var bool pushed_left_tile 	= false;

	var bool pushes_top_obj 	= false;
	var bool pushes_bottom_obj 	= false;
	var bool pushes_right_obj 	= false;
	var bool pushes_left_obj 	= false;

	var bool pushed_top_obj 	= false;
	var bool pushed_bottom_obj 	= false;
	var bool pushed_right_obj 	= false;
	var bool pushed_left_obj 	= false;

	var bool destroyed = false;
end

code/call Create_Moving_Obj ( var IVector position, var IVector size, var BType body_type) -> IMoving_Obj
do
	var IAABBox iaabb 						= val IAABBox(position, call VDivSca(size, 2), _, _);
	var IKinematic_Component ikinematic 	= call Create_Kinematic_Component ( position );
	var ISteering_Component isteering 		= val ISteering_Component(_, _);
	var IMoving_Obj imov_obj 				= val IMoving_Obj (iaabb, ikinematic, isteering, body_type, _,
																_, _, _, _, 
																_, _, _, _, 
																_, _, _, _, 
																_, _, _, _,
																_, _, _, _, 
																_, _, _, _,
																_);
	escape imov_obj;
end

code/call Set_Position ( var& IMoving_Obj imov_obj, var IVector position ) -> none
do
    imov_obj.ikinematic.old_position 	= position;
    imov_obj.ikinematic.position 		= position;
    imov_obj.iaabb.center 	= position;
end