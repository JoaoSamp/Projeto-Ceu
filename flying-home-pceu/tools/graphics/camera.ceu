data ICamera with
	var IVector position;
	var IVector scale;
end
var IVector camera_position = val IVector (0, 0);
var IVector camera_scale 	= val IVector (2, 2);
var ICamera global_camera = val ICamera (camera_position, camera_scale);

code/call Draw_Image(var text image_name, var IVector position, var IVector scale, var real rotate_angle ) -> none
do
	if scale.x < 0 and scale.y < 0 then
		emit GRAPHICS_SET_FLIP(FLIP_BOTH);
	else/if scale.x < 0 then
		emit GRAPHICS_SET_FLIP(FLIP_HORIZONTAL);
	else/if scale.y < 0 then
		emit GRAPHICS_SET_FLIP(FLIP_VERTICAL);
	else
		emit GRAPHICS_SET_FLIP(FLIP_NONE);
	end

	scale.x = _abs(scale.x);
	scale.y = _abs(scale.y);

	position.x 	= position.x * outer.global_camera.scale.x;
	position.y 	= position.y * outer.global_camera.scale.y;
	position.x 	= position.x - outer.global_camera.position.x;
	position.y 	= position.y - outer.global_camera.position.y;
	scale.x 	= scale.x * outer.global_camera.scale.x;
	scale.y 	= scale.y * outer.global_camera.scale.y;

	emit GRAPHICS_SET_SCALE ( scale.x, scale.y );
	emit GRAPHICS_SET_ROTATION ( rotate_angle );
	emit GRAPHICS_DRAW_BMP ( position.x as int, position.y as int, &&image_name[0] as text );
end