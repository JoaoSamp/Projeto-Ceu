var IVector sprite_size_ring			= val IVector (32, 32);
var& SDL_Open_Image img_idle_ring 		= spawn SDL_Open_Image(&renderer, "assets/img/tiles/smallRing-idle.png");
var& SDL_Open_Image img_destroy_ring 	= spawn SDL_Open_Image(&renderer, "assets/img/tiles/smallRing-destroy.png");
var IImage_Quad idle_quad_ring			= val IImage_Quad( &img_idle_ring, sprite_size_ring, _ );

data ITile.IRing;

code/call Create_Ring ( var IVector start_pos, var IVector speed) -> ITile.IRing
do
	var IVector size 			= val IVector (26, 26);
	var IVector sprite_size		= val IVector (32, 32);
	var IVector sprite_offset	= val IVector (16, 16);
    var IMoving_Obj imov_obj     = call Create_Moving_Obj( start_pos, size);

	var IImage_Quad iq_destroy		= val IImage_Quad( &outer.img_destroy_ring, outer.sprite_size_ring, _ );
    var IAnimation ianim_destroy    = val IAnimation( iq_destroy, sprite_offset, 12 );

    imov_obj.speed 				= speed;
    var ITile.IRing tile 		= val ITile.IRing ( imov_obj, sprite_offset, &outer.idle_quad_ring, ianim_destroy, _, _, _, _);
    escape tile;
end

code/await Ring(var& ITile.IRing itile) -> none
do
	await Common_Tile (&itile);
end

code/await/dynamic Tile (var&/dynamic ITile.IRing t) -> (var ITile.IRing itile = t) -> none
do
	await Ring (&itile);
end

code/await/dynamic Hit_Tile (var&/dynamic IActor.IPlayer iactor, var&/dynamic ITile.IRing itile) -> none
do
	emit iactor.hit;
	emit itile.hit;
	call Change_Mana (10, &iactor);
	emit itile.destroy;
end