code/await Character (var int x, var int y, var int w, var int h, var& _SDL_Renderer ren)
    -> (var SDL_Rect rect = val SDL_Rect(x, y, w, h))
         -> NEVER
do
    var& SDL_Open_Image img_backward =
        spawn SDL_Open_Image(&ren, "assets/img/char/walker-backward.png");
    var& SDL_Open_Image img_dead =
        spawn SDL_Open_Image(&ren, "assets/img/char/walker-dead.png");
    var& SDL_Open_Image img_dive =
        spawn SDL_Open_Image(&ren, "assets/img/char/walker-dive.png");
    var& SDL_Open_Image img_flying =
        spawn SDL_Open_Image(&ren, "assets/img/char/walker-fly.png");
    var& SDL_Open_Image img_foward =
        spawn SDL_Open_Image(&ren, "assets/img/char/walker-foward.png");
    var& SDL_Open_Image img_glide =
        spawn SDL_Open_Image(&ren, "assets/img/char/walker-glide.png");

    var int flying_speed    = 150;
    var int foward_speed    = 150;
    var int backward_speed  = -150;
    var int normal_speed    = 0;
    var int gravity         = 50;
    event int e_anim;

    var SDL_Rect body_rect  = val SDL_Rect(14, 18, 10, 16);
    var SDL_Rect speed      = val SDL_Rect(normal_speed, gravity, 0, 0);

    par do 
        var int anim = 0;
        var bool pending = false;
        spawn do
            every anim in e_anim do
                pending = true;
            end
        end
        loop do
            var& SDL_Open_Image img;
            if anim == 1 then
                img = &img_foward;
            else/if anim == 2 then
                img = &img_backward;
            else/if anim == 3 then
                img = &img_backward;
            else/if anim == 4 then
                img = &img_flying;
            else/if anim == 5 then
                img = &img_dive;
            else 
                img = &img_glide;
            end
            loop do
                await Animation (32, 32, 8, &rect, &ren, &img);
                if pending then
                    break;
                end
            end
            pending = false;
        end
    with
        spawn do
            var int dt;
            every dt in SDL_DT do
                var real speed_x = ((speed.x * dt)/1000);
                var real speed_y = ((speed.y * dt)/1000);
                rect.x = rect.x + (speed_x as int);
                rect.y = rect.y + (speed_y as int);
                if rect.y > 576 - 32 - rect.h + body_rect.y - (body_rect.h/2) then
                    rect.y = 576 - 32 - rect.h + body_rect.y - (body_rect.h/2);
                else/if rect.y < 32 - body_rect.y then
                    rect.y = 32 - body_rect.y;
                end
            end
        end
        loop do
            var int anim;
            var u8&& key_state = _SDL_GetKeyboardState(null);

            if key_state[_SDL_SCANCODE_A] != key_state[_SDL_SCANCODE_D] then 
                if key_state[_SDL_SCANCODE_A] == 1 then
                    speed.x = backward_speed;
                    anim    = 2;
                else
                    speed.x = foward_speed;
                    anim     = 1;
                end
            else
                speed.x = normal_speed;
                anim     = 0;
            end
            if key_state[_SDL_SCANCODE_W] != key_state[_SDL_SCANCODE_S] then
                if key_state[_SDL_SCANCODE_S] == 1 then
                    speed.y = flying_speed;
                    anim    = 5;
                else
                    speed.y = -flying_speed;
                    anim     = 4;
                end
            else
                speed.y = gravity;
            end

            emit e_anim(anim);       
            par/or do
                var _SDL_KeyboardEvent&& key = await SDL_KEYDOWN until (key:keysym.sym == _SDLK_a 
                                                                        or key:keysym.sym == _SDLK_d
                                                                        or key:keysym.sym == _SDLK_s
                                                                        or key:keysym.sym == _SDLK_w);
            with
                var _SDL_KeyboardEvent&& key = await SDL_KEYUP until (key:keysym.sym == _SDLK_a 
                                                                    or key:keysym.sym == _SDLK_d
                                                                    or key:keysym.sym == _SDLK_s
                                                                    or key:keysym.sym == _SDLK_w);
            end
        end
    end
end