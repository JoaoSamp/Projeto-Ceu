code/await Character (var int x, var int y, var int w, var int h, var& _SDL_Renderer ren) -> none
do
    var& SDL_Open_Image img_backward =
        spawn SDL_Open_Image(&ren, "assets/img/char/walker-backward.png");
    var& SDL_Open_Image img_dead =
        spawn SDL_Open_Image(&ren, "assets/img/char/walker-dead.png");
    var& SDL_Open_Image img_dive =
        spawn SDL_Open_Image(&ren, "assets/img/char/walker-dive.png");
    var& SDL_Open_Image img_flying =
        spawn SDL_Open_Image(&ren, "assets/img/char/walker-fly.png");
    var& SDL_Open_Image img_foward =
        spawn SDL_Open_Image(&ren, "assets/img/char/walker-foward.png");
    var& SDL_Open_Image img_glide =
        spawn SDL_Open_Image(&ren, "assets/img/char/walker-glide.png");

    var SDL_Rect char_rect  = val SDL_Rect(x, y, w, h);
    var int flying_speed    = 100;
    var int foward_speed    = 100;
    var int backward_speed  = -100;
    var int normal_speed    = 50;
    var int gravity         = 50;

    code/await Glide (none) -> none
    do
        event none check_exit_keys;
        var SDL_Rect speed      = val SDL_Rect(outer.normal_speed, outer.gravity,0,0);
        var& SDL_Rect c_rect    = &outer.char_rect;
        par/or do
            par do
                var int dt;
                every dt in SDL_DT do
                    var real speed_x = ((speed.x * dt)/1000);
                    var real speed_y = ((speed.y * dt)/1000);
                    c_rect.x = c_rect.x + (speed_x as int);
                    c_rect.y = c_rect.y + (speed_y as int);
                end
            with
                await Animation (32, 32, 8, &c_rect, &outer.ren, &outer.img_glide);
            end
        with            
            loop do
                var _SDL_KeyboardEvent&& key = await SDL_KEYDOWN until (key:keysym.sym == _SDLK_a 
                                                                    or key:keysym.sym == _SDLK_d);
                emit check_exit_keys;
            end
        with
            loop do
                var _SDL_KeyboardEvent&& key = await SDL_KEYUP until (key:keysym.sym == _SDLK_a 
                                                                    or key:keysym.sym == _SDLK_d);
                emit check_exit_keys;
            end
        with
            loop do                 
                var u8&& key_state = _SDL_GetKeyboardState(null);
                if key_state[_SDL_SCANCODE_A] != key_state[_SDL_SCANCODE_D] then
                    break;
                end
                await check_exit_keys;
            end
        end
    end

    code/await Foward_Backward(none) -> none
    do
        var& SDL_Open_Image img;
        var int speed_x;
        var u8&& key_state = _SDL_GetKeyboardState(null);
        if key_state[_SDL_SCANCODE_A] == 1 then
            speed_x = outer.backward_speed;
            img     = &outer.img_backward;
        else
            speed_x = outer.foward_speed;
            img     = &outer.img_foward;
        end

        var& SDL_Rect c_rect = &outer.char_rect;
        var SDL_Rect speed = val SDL_Rect(speed_x, outer.gravity,0,0);
        par/or do
            par do
                var int dt;
                every dt in SDL_DT do
                    var real speed_x = ((speed.x * dt)/1000);
                    var real speed_y = ((speed.y * dt)/1000);
                    c_rect.x = c_rect.x + (speed_x as int);
                    c_rect.y = c_rect.y + (speed_y as int);
                end
            with
                await Animation (32, 32, 8, &c_rect, &outer.ren, &img);
            end
        with
            loop do
                var u8&& key_state = _SDL_GetKeyboardState(null);
                if key_state[_SDL_SCANCODE_A] == key_state[_SDL_SCANCODE_D] then
                    break;
                end
                var _SDL_KeyboardEvent&& key = await SDL_KEYDOWN until (key:keysym.sym == _SDLK_a 
                                                                    or key:keysym.sym == _SDLK_d);
            end
        with
            var _SDL_KeyboardEvent&& key = await SDL_KEYUP until (key:keysym.sym == _SDLK_a 
                                                                or key:keysym.sym == _SDLK_d);
        end
    end

    code/await Fly_Dive (none) -> none
    do
        event none change_x_speed;
        var& SDL_Open_Image img;
        var SDL_Rect speed = val SDL_Rect(0, 0, 0, 0);
        var u8&& key_state = _SDL_GetKeyboardState(null);

        if key_state[_SDL_SCANCODE_S] == 1 then
            speed.y = outer.flying_speed;
            img     = &outer.img_dive;
        else
            speed.y = -(outer.flying_speed);
            img     = &outer.img_flying;
        end

        var& SDL_Rect c_rect = &outer.char_rect;
        par/or do
            par do
                var int dt;
                every dt in SDL_DT do
                    var real speed_x = ((speed.x * dt)/1000);
                    var real speed_y = ((speed.y * dt)/1000);
                    c_rect.x = c_rect.x + (speed_x as int);
                    c_rect.y = c_rect.y + (speed_y as int);
                end
            with
                await Animation (32, 32, 8, &c_rect, &outer.ren, &img);
            with   
                loop do
                    var _SDL_KeyboardEvent&& key = await SDL_KEYDOWN until (key:keysym.sym == _SDLK_a 
                                                                        or key:keysym.sym == _SDLK_d);
                    emit change_x_speed;
                end
            with
                loop do
                    var _SDL_KeyboardEvent&& key = await SDL_KEYUP until (key:keysym.sym == _SDLK_a 
                                                                        or key:keysym.sym == _SDLK_d);
                    emit change_x_speed;
                end
            with
                loop do
                    var u8&& key_state = _SDL_GetKeyboardState(null);
                    if key_state[_SDL_SCANCODE_A] != key_state[_SDL_SCANCODE_D] then
                        if key_state[_SDL_SCANCODE_A] == 1 then
                            speed.x = outer.backward_speed;
                        else
                            speed.x = outer.foward_speed;
                        end
                    else
                        speed.x = outer.normal_speed;
                    end
                    await change_x_speed;
                end
            end
        with
            loop do
                var u8&& key_state = _SDL_GetKeyboardState(null);
                if key_state[_SDL_SCANCODE_W] == key_state[_SDL_SCANCODE_S] then
                    break;
                end
                var _SDL_KeyboardEvent&& key = await SDL_KEYDOWN until (key:keysym.sym == _SDLK_w 
                                                                    or key:keysym.sym == _SDLK_s);
            end
        with
            var _SDL_KeyboardEvent&& key = await SDL_KEYUP until (key:keysym.sym == _SDLK_w
                                                                or key:keysym.sym == _SDLK_s);
        end
    end


    loop do
        event none check_exit_keys;
        par/or do
            await Glide();
            await Foward_Backward();
            continue;
        with
            loop do
                var _SDL_KeyboardEvent&& key = await SDL_KEYDOWN until (key:keysym.sym == _SDLK_w 
                                                                    or key:keysym.sym == _SDLK_s);
                emit check_exit_keys;
            end
        with
            loop do
                var _SDL_KeyboardEvent&& key = await SDL_KEYUP until (key:keysym.sym == _SDLK_s
                                                                    or key:keysym.sym == _SDLK_w);
                emit check_exit_keys;
            end
        with
            loop do             
                var u8&& key_state = _SDL_GetKeyboardState(null);
                if key_state[_SDL_SCANCODE_W] != key_state[_SDL_SCANCODE_S] then
                    break;
                end
                await check_exit_keys;
            end
        end
        await Fly_Dive();
    end

end
