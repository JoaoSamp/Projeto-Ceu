data Image_Quad with
	var& _SDL_Renderer ren;
	var& SDL_Open_Image img;
	var& Vector size;
	var Vector frame = val Vector (0, 0);
end

var Vector draw_scale = val Vector (2, 2);

code/call Draw(var& Image_Quad quad, var real x, var real y, var real sx, var real sy, var real ox, var real oy ) -> none
do
	var SDL_Rect draw_rect = val SDL_Rect(	(x * outer.draw_scale.x) as int, (y * outer.draw_scale.y) as int,
											(quad.size.x * outer.draw_scale.x * sx) as int, (quad.size.y * outer.draw_scale.y * sx) as int);
	draw_rect.x = (draw_rect.x - (ox * outer.draw_scale.x * sx)) as int;
	draw_rect.y = (draw_rect.y - (oy * outer.draw_scale.y * sy)) as int;


	var SDL_Rect draw_frame = val SDL_Rect (quad.frame.x as int, quad.frame.y as int, 
											quad.size.x as int, quad.size.y as int);
	_SDL_RenderCopy(&&quad.ren, &&quad.img.tex.tex, &&draw_frame as _SDL_Rect&&, &&draw_rect as _SDL_Rect&&);
end