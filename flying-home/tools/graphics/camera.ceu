var int camera_tile_size = 32;
var IVector camera_scale = val IVector (16, 9);
var IVector camera_size =  val IVector (camera_scale.x * camera_tile_size, camera_scale.y * camera_tile_size);
var IVector draw_scale 	= val IVector (1, 1);
var IVector draw_offset = val IVector (0, 0);

code/call Draw(var& IImage_Quad iquad, var real x, var real y, var real sx, var real sy, var real ox, var real oy, var real rotate_angle) -> none
do
	var _SDL_RendererFlip flip;
	if sx < 0 and sy < 0 then
		sx = _fabs(sx);
		sy = _fabs(sy);
		flip = _SDL_FLIP_HORIZONTAL | _SDL_FLIP_VERTICAL;
	else/if sx < 0 then
		sx = _fabs(sx);
		flip = _SDL_FLIP_HORIZONTAL;
	else/if sy < 0 then
		sy = _fabs(sy);
		flip = _SDL_FLIP_VERTICAL;
	else
		flip = _SDL_FLIP_NONE;
	end

	var SDL_Rect draw_rect = val SDL_Rect(	(x * outer.draw_scale.x) as int, (y * outer.draw_scale.y) as int,
											(iquad.size.x * outer.draw_scale.x * sx) as int, (iquad.size.y * outer.draw_scale.y * sx) as int);

	draw_rect.x = (outer.draw_offset.x + (draw_rect.x - (ox * outer.draw_scale.x * sx))) as int;
	draw_rect.y = (outer.draw_offset.y + (draw_rect.y - (oy * outer.draw_scale.y * sy))) as int;

	var SDL_Rect frame = val SDL_Rect(iquad.position.x as int, iquad.position.y as int, iquad.size.x as int, iquad.size.y as int);
	_SDL_RenderCopyEx(&&outer.renderer, &&iquad.img.tex.tex, &&frame as _SDL_Rect&&, &&draw_rect as _SDL_Rect&&, rotate_angle, null, flip);
end	

code/call Set_Camera (none) -> none
do
	var int w = 0;
	var int h = 0;
	call _SDL_GetWindowSize( &&outer.sdl.win as _SDL_Window&&, &&w, &&h );
	var real x = w / (outer.camera_scale.x * outer.camera_tile_size);
	var real y = h / (outer.camera_scale.y * outer.camera_tile_size);
	if x < y then
		outer.draw_scale.x = x;
		outer.draw_scale.y = x;
		outer.draw_offset.y = (h % ((x * outer.camera_tile_size * outer.camera_scale.y) as int)) / 2;
	else
		outer.draw_scale.x = y;
		outer.draw_scale.y = y;
		outer.draw_offset.x = (w % ((y * outer.camera_tile_size * outer.camera_scale.x) as int)) / 2;
	end
end


code/await Camera_Border (none) -> NEVER
do
	every SDL_REDRAW do
		var int window_w = 0;
		var int window_h = 0;
		call _SDL_GetWindowSize( &&outer.sdl.win as _SDL_Window&&, &&window_w, &&window_h );
		_SDL_SetRenderDrawColor( &&outer.renderer, 32, 32, 32, 0 );

		var SDL_Rect side_border = val SDL_Rect ( 0, 0, outer.draw_offset.x as int, window_h );
		_SDL_RenderFillRect( &&outer.renderer, &&side_border as _SDL_Rect&& );
		side_border.x = window_w - side_border.w;
		_SDL_RenderFillRect( &&outer.renderer, &&side_border as _SDL_Rect&& );

		var SDL_Rect topbot_border = val SDL_Rect ( 0, 0, window_w, outer.draw_offset.y as int );
		_SDL_RenderFillRect( &&outer.renderer, &&topbot_border as _SDL_Rect&& );
		topbot_border.y = window_h - topbot_border.h;
		_SDL_RenderFillRect( &&outer.renderer, &&topbot_border as _SDL_Rect&& );
	end
end