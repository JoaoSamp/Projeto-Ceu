data IBackground with
    var& IImage_Quad quad;
    var IVector position 	= val IVector(0, 0);
    var IVector scale 		= val IVector(1, 1);
    var IVector offset 		= val IVector(0, 0);
    var IVector speed;
    var real rotate_angle = 0;
end

code/call Create_Background (var& IImage_Quad quad, var IVector speed) -> IBackground
do
	var IBackground ibg = val IBackground(&quad, _, _, _, speed, _);
	escape ibg;
end

code/await Background_Image ( var IBackground ibackground ) -> none
do
	par/or do
		every SDL_REDRAW do
    		call Draw( &ibackground.quad, ibackground.position.x, ibackground.position.y, ibackground.scale.x, ibackground.scale.y, ibackground.offset.x, ibackground.offset.y, ibackground.rotate_angle );
		end
	with
        var int dt;
        every dt in SDL_DT do
		    var real speed_x = ibackground.speed.x * dt/1000;
		    var real speed_y = ibackground.speed.y * dt/1000;

		    ibackground.position.x = (ibackground.position.x + speed_x);
		    ibackground.position.y = (ibackground.position.y + speed_y);
		    if ibackground.position.x < -(ibackground.quad.size.x * ibackground.scale.x)  then
		    	break;
		    end
        end
	end
end

code/await Background_Color ( var int r, var int g, var int b, var int a ) -> NEVER
do
	every SDL_REDRAW do
		var int x = outer.draw_offset.x as int;
		var int y = outer.draw_offset.y as int;
		var int w = (outer.camera_scale.x * outer.camera_tile_size * outer.draw_scale.x) as int;
		var int h = (outer.camera_scale.y * outer.camera_tile_size * outer.draw_scale.y) as int;
		var SDL_Rect bg_rect = val SDL_Rect (x, y, w, h);
		_SDL_SetRenderDrawColor(&&outer.renderer, r, g, b, a);
		_SDL_RenderFillRect(&&outer.renderer, &&bg_rect as _SDL_Rect&&);
	end
end