code/await Player_Status ( var& IActor.IPlayer iplayer) -> NEVER
do

    var& SDL_Open_Image img_heart       = spawn SDL_Open_Image(&outer.renderer, "assets/img/hud/heart.png");
    var& SDL_Open_Image img_life        = spawn SDL_Open_Image(&outer.renderer, "assets/img/hud/life.png");
    var& SDL_Open_Image img_mana_bar  = spawn SDL_Open_Image(&outer.renderer, "assets/img/hud/mana-bar.png");
    var& SDL_Open_Image img_mana 		= spawn SDL_Open_Image(&outer.renderer, "assets/img/hud/mana.png");

    var IVector heart_size 		= val IVector ( 30, 25 );
    var IVector heart_quad_pos 	= val IVector ( 30, 19 );
    var IVector life_size		= val IVector ( 22, 17 );
    var IVector life_quad_pos 	= val IVector ( 34, 23 );

    var IVector mana_bar_size 		= val IVector ( 77, 13 );
    var IVector mana_bar_quad_pos 	= val IVector ( 46, 31 );
    var IVector mana_size 			= val IVector ( 68, 5 );
    var IVector mana_quad_pos 		= val IVector ( 51, 35 );

    var IVector heart_offset 		= call Vec_ScaDiv( heart_size, 2 );
    var IVector life_offset			= call Vec_ScaDiv( life_size, 2 );
    var IVector mana_bar_offset 	= call Vec_ScaDiv( mana_bar_size, 2 );
    var IVector mana_offset 		= call Vec_ScaDiv( mana_size, 2 );

    var IImage_Quad iq_heart 		= val IImage_Quad( &img_heart,  	heart_size, 		heart_quad_pos );
    var IImage_Quad iq_life   		= val IImage_Quad( &img_life,    	life_size, 			life_quad_pos );
    var IImage_Quad iq_mana_bar   = val IImage_Quad( &img_mana_bar, mana_bar_size, 	mana_bar_quad_pos );
    var IImage_Quad iq_mana   	= val IImage_Quad( &img_mana,    	mana_size, 		mana_quad_pos );

	var IVector origin 	= val IVector (15, 15);
	var IVector scale 	= val IVector (1, 1);
	var real rotate_angle 	= 0;

	var IVector h_position = val IVector ( 15, 15);
	var IVector b_position = val IVector ( 53, 21);

	var IVector heart_position 		= call Vec_Add (h_position, origin);
	var IVector life_position 		= heart_position;
	var IVector mana_bar_position 	= call Vec_Add (b_position, origin);
	var IVector mana_position 		= mana_bar_position;

	par do 
		every SDL_REDRAW do
			call Draw( &iq_mana_bar, 	mana_bar_position.x, mana_bar_position.y, scale.x, scale.y, mana_bar_offset.x, mana_bar_offset.y, rotate_angle );
			call Draw( &iq_mana, 		mana_position.x, mana_position.y, scale.x, scale.y, mana_offset.x, mana_offset.y, rotate_angle );
			call Draw( &iq_heart, 	heart_position.x, heart_position.y, scale.x, scale.y, heart_offset.x, heart_offset.y, rotate_angle );
			call Draw( &iq_life, 	life_position.x, life_position.y, scale.x, scale.y, life_offset.x, life_offset.y, rotate_angle );
		end
	with
		loop do
			await iplayer.hit;
			iq_life.size.y 		= life_size.y * (iplayer.current_life / iplayer.max_life);
			var real desl_y 	= life_size.y - iq_life.size.y;
			iq_life.position.y 	= life_quad_pos.y + desl_y;
			life_position.y 	= heart_position.y + desl_y;

			var real desl_x 	= mana_size.x - iq_mana.size.x;
			iq_mana.size.x 		= mana_size.x * ( iplayer.current_mana / iplayer.max_mana);
		end
	end
end