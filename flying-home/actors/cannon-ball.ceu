data IActor.ICannon_Ball;

code/call Create_Cannon_Ball (var IVector start_pos, var IVector speed, var& IMap imap) -> IActor.ICannon_Ball
do
    var IVector size             = val IVector(12, 12);
    var IMoving_Obj imov_obj     = call Create_Moving_Obj( start_pos, size);
    imov_obj.speed = speed;
	var IActor.ICannon_Ball ic_ball = val IActor.ICannon_Ball( imov_obj, &imap, 0, 0, 0, 0, _, _, _, _ );
    call Bound_Actor(&ic_ball, false);
    escape ic_ball;
end

code/await Cannon_Ball (var& IActor.ICannon_Ball ic_ball) -> none
do
    var IVector sprite_size      = val IVector(48, 48);
    var IVector sprite_offset    = val IVector(24, 24);

    var& SDL_Open_Image img_idle = spawn SDL_Open_Image(&outer.renderer, "assets/img/actors/smallBall.png");

    var IImage_Quad iq_idle    = val IImage_Quad( &img_idle,     sprite_size, _ );
    var IAnimation ianim_idle  = val IAnimation( iq_idle,       sprite_offset, 1 );

	par/or do
        loop do
            await Animation (&ianim_idle, &ic_ball.imov_obj.aabb.center, &ic_ball.imov_obj.aabb.scale, &ic_ball.imov_obj.aabb.rotate_angle );
        end
    with
		var int dt;
		every dt in SDL_DT do
            if call Off_Screen (&ic_ball) then
            	break;
            end
        end
    with
    	await ic_ball.hit;
    end
end

code/await/dynamic Actor ( var&/dynamic IActor.ICannon_Ball iact )
    -> ( var IActor.ICannon_Ball iactor = iact )
         -> none
do
    await Cannon_Ball(&iactor);
end

code/await/dynamic Hit_Actor (var&/dynamic IActor.ICannon_Ball hitman, var&/dynamic IActor.IPlayer hitted) -> none
do
	var int value = -(_rand()%5 + 5);
	call Change_Life( value, &hitted);
    emit hitted.hit;
    emit hitman.hit;
end