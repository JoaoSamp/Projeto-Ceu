data IActor with
    var IMoving_Obj imov_obj;
    var& IMap imap;
    var real max_life;
    var real current_life;
    var real max_mana;
    var real current_mana;
    event none hit;
    event none poison_hit;
    event none destroy;
    event int stun;
end

code/call Create_Actor (var IMoving_Obj imov_obj, var& IMap imap) -> IActor
do
    var IActor iactor = val IActor( imov_obj, &imap, 0, 0, 0, 0, _, _, _, _ );
    escape iactor;
end

code/await/dynamic Actor ( var&/dynamic IActor iact )
    -> ( var IActor iactor = iact ) -> none
do
end

code/await/dynamic Hit_Tile (var&/dynamic IActor iactor, var&/dynamic ITile itile) -> none
do

end

code/await/dynamic Hit_Actor (var&/dynamic IActor hitman, var&/dynamic IActor hitted) -> none
do

end

code/call Off_Screen (var& IActor iactor) -> bool
do
    if (iactor.imov_obj.aabb.center.x < 0) or (iactor.imov_obj.aabb.center.x > outer.camera_size.x + iactor.imov_obj.aabb.half_size.x) then
        escape true;
    end
    if (iactor.imov_obj.aabb.center.y < 0) or (iactor.imov_obj.aabb.center.y > outer.camera_size.y + iactor.imov_obj.aabb.half_size.y) then
        escape true;
    end
    escape false;
end

code/call Bound_Actor (var& IActor iactor, var bool bound) -> none
do
    iactor.imov_obj.bound_top       = bound;
    iactor.imov_obj.bound_bottom    = bound;
    iactor.imov_obj.bound_left      = bound;
    iactor.imov_obj.bound_right     = bound;
end

code/call Change_Life (var real value, var& IActor iactor) -> none
do
    iactor.current_life = iactor.current_life + value;
    if iactor.current_life > iactor.max_life then
        iactor.current_life = iactor.max_life;
    end
end

code/call Change_Mana (var real value, var& IActor iactor) -> none
do
    iactor.current_mana = iactor.current_mana + value;
    if iactor.current_mana > iactor.max_mana then
        iactor.current_mana = iactor.max_mana;
    end
end

code/await Status_Effect (var& IActor iactor) -> NEVER
do
	loop do
		await iactor.poison_hit;
		loop do
			par/or do
				loop _ in [1 -> 10] do
					call Change_Life (-1, &iactor);
					emit iactor.hit;
					await 1000ms;
				end
				break;
			with
				await iactor.poison_hit;
			end
		end
	end
end